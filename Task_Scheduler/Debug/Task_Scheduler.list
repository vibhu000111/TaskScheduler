
Task_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000eac  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08001054  08001054  00011054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010f8  080010f8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080010f8  080010f8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010f8  080010f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010f8  080010f8  000110f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010fc  080010fc  000110fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000004c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c0  200000c0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000025ac  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006f7  00000000  00000000  00022650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00022d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000160  00000000  00000000  00022ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c56  00000000  00000000  00023040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000153c  00000000  00000000  00025c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009a5d  00000000  00000000  000271d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00030c2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000bdc  00000000  00000000  00030c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000074 	.word	0x20000074
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800103c 	.word	0x0800103c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000078 	.word	0x20000078
 80001e4:	0800103c 	.word	0x0800103c

080001e8 <main>:
#define HSI_CLK 16000000U
#define SYSTICK_TIM_CLK HSI_CLK


int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
    /* Loop forever */
	enable_fault_handler();
 80001ec:	f000 f8fc 	bl	80003e8 <enable_fault_handler>
	init_scheduler_stack(SCHED_STACK_START);
 80001f0:	4806      	ldr	r0, [pc, #24]	; (800020c <main+0x24>)
 80001f2:	f000 f8b1 	bl	8000358 <init_scheduler_stack>
	init_task_dummy();
 80001f6:	f000 f857 	bl	80002a8 <init_task_dummy>


	init_systick_timer(TICK_HZ); //enables systick
 80001fa:	2001      	movs	r0, #1
 80001fc:	f000 f828 	bl	8000250 <init_systick_timer>

	switch_sp_to_psp();
 8000200:	f000 f906 	bl	8000410 <switch_sp_to_psp>
	task1_handler();
 8000204:	f000 f804 	bl	8000210 <task1_handler>


	for(;;);
 8000208:	e7fe      	b.n	8000208 <main+0x20>
 800020a:	bf00      	nop
 800020c:	2001f600 	.word	0x2001f600

08000210 <task1_handler>:
}
void task1_handler(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task1\n");
 8000214:	4801      	ldr	r0, [pc, #4]	; (800021c <task1_handler+0xc>)
 8000216:	f000 fab9 	bl	800078c <puts>
 800021a:	e7fb      	b.n	8000214 <task1_handler+0x4>
 800021c:	08001054 	.word	0x08001054

08000220 <task2_handler>:
	}
}
void task2_handler(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task2\n");
 8000224:	4801      	ldr	r0, [pc, #4]	; (800022c <task2_handler+0xc>)
 8000226:	f000 fab1 	bl	800078c <puts>
 800022a:	e7fb      	b.n	8000224 <task2_handler+0x4>
 800022c:	08001064 	.word	0x08001064

08000230 <task3_handler>:
	}

}
void task3_handler(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task3\n");
 8000234:	4801      	ldr	r0, [pc, #4]	; (800023c <task3_handler+0xc>)
 8000236:	f000 faa9 	bl	800078c <puts>
 800023a:	e7fb      	b.n	8000234 <task3_handler+0x4>
 800023c:	08001074 	.word	0x08001074

08000240 <task4_handler>:
	}
}
void task4_handler(void){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0

	while(1)
	{
		printf("This is task4\n");
 8000244:	4801      	ldr	r0, [pc, #4]	; (800024c <task4_handler+0xc>)
 8000246:	f000 faa1 	bl	800078c <puts>
 800024a:	e7fb      	b.n	8000244 <task4_handler+0x4>
 800024c:	08001084 	.word	0x08001084

08000250 <init_systick_timer>:
	}
}
void init_systick_timer(uint32_t tick_hz)
{
 8000250:	b480      	push	{r7}
 8000252:	b087      	sub	sp, #28
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	uint32_t* SYST_RVR = (uint32_t*)0xE000E014;
 8000258:	4b10      	ldr	r3, [pc, #64]	; (800029c <init_systick_timer+0x4c>)
 800025a:	617b      	str	r3, [r7, #20]
	uint32_t count = (SYSTICK_TIM_CLK / tick_hz)-1;
 800025c:	4a10      	ldr	r2, [pc, #64]	; (80002a0 <init_systick_timer+0x50>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	fbb2 f3f3 	udiv	r3, r2, r3
 8000264:	3b01      	subs	r3, #1
 8000266:	613b      	str	r3, [r7, #16]

	//clear value of rvr // 31:24 is reserved 23:0 is where data will be stored

	*SYST_RVR&= ~(0x00ffffff); //clears the 23:0
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	601a      	str	r2, [r3, #0]
	*SYST_RVR|=count;
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	693b      	ldr	r3, [r7, #16]
 800027a:	431a      	orrs	r2, r3
 800027c:	697b      	ldr	r3, [r7, #20]
 800027e:	601a      	str	r2, [r3, #0]
[0] ENABLE Enables the counter:
0 = counter disabled
1 = counter enabled
	 */

	uint32_t* SYST_csr =(uint32_t*) 0xE000E010;
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <init_systick_timer+0x54>)
 8000282:	60fb      	str	r3, [r7, #12]
	*SYST_csr|=(7 << 0); //clears the last 3 bits
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f043 0207 	orr.w	r2, r3, #7
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	601a      	str	r2, [r3, #0]




}
 8000290:	bf00      	nop
 8000292:	371c      	adds	r7, #28
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	e000e014 	.word	0xe000e014
 80002a0:	00f42400 	.word	0x00f42400
 80002a4:	e000e010 	.word	0xe000e010

080002a8 <init_task_dummy>:
void init_task_dummy()
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
	task_handler[0]=(uint32_t)task1_handler;
 80002ae:	4a24      	ldr	r2, [pc, #144]	; (8000340 <init_task_dummy+0x98>)
 80002b0:	4b24      	ldr	r3, [pc, #144]	; (8000344 <init_task_dummy+0x9c>)
 80002b2:	601a      	str	r2, [r3, #0]
		task_handler[1]=(uint32_t)task2_handler;
 80002b4:	4a24      	ldr	r2, [pc, #144]	; (8000348 <init_task_dummy+0xa0>)
 80002b6:	4b23      	ldr	r3, [pc, #140]	; (8000344 <init_task_dummy+0x9c>)
 80002b8:	605a      	str	r2, [r3, #4]
		task_handler[2]=(uint32_t)task3_handler;
 80002ba:	4a24      	ldr	r2, [pc, #144]	; (800034c <init_task_dummy+0xa4>)
 80002bc:	4b21      	ldr	r3, [pc, #132]	; (8000344 <init_task_dummy+0x9c>)
 80002be:	609a      	str	r2, [r3, #8]
		task_handler[3]=(uint32_t)task4_handler;
 80002c0:	4a23      	ldr	r2, [pc, #140]	; (8000350 <init_task_dummy+0xa8>)
 80002c2:	4b20      	ldr	r3, [pc, #128]	; (8000344 <init_task_dummy+0x9c>)
 80002c4:	60da      	str	r2, [r3, #12]
	uint32_t* pPSP; // to iterate through process stack pointer of different tasks
	for(int i=0;i<4;i++)
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
 80002ca:	e02f      	b.n	800032c <init_task_dummy+0x84>
	{
		pPSP = (uint32_t*) psp_of_tasks[i];
 80002cc:	4a21      	ldr	r2, [pc, #132]	; (8000354 <init_task_dummy+0xac>)
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d4:	60fb      	str	r3, [r7, #12]

		*pPSP = DUMMY_XPSR ;// xpsr = 0x01000000 pPSP is storing mem location of stack that holds xpsr during exception return
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002dc:	601a      	str	r2, [r3, #0]
		pPSP--;//PC
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	3b04      	subs	r3, #4
 80002e2:	60fb      	str	r3, [r7, #12]

		*pPSP =  task_handler[i]; //location PC initialized
 80002e4:	4a17      	ldr	r2, [pc, #92]	; (8000344 <init_task_dummy+0x9c>)
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	601a      	str	r2, [r3, #0]
		pPSP--;//LR
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	3b04      	subs	r3, #4
 80002f4:	60fb      	str	r3, [r7, #12]

		*pPSP = 0xFFFFFFFD; //EXC_RETURN when decoded tells the processor to use PSP in thread mode
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	f06f 0202 	mvn.w	r2, #2
 80002fc:	601a      	str	r2, [r3, #0]

		for(int j=1;j<=13;j++)
 80002fe:	2301      	movs	r3, #1
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	e008      	b.n	8000316 <init_task_dummy+0x6e>
		{

			pPSP--;
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	3b04      	subs	r3, #4
 8000308:	60fb      	str	r3, [r7, #12]
			*pPSP=0;//initializing all general purpose registers
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
		for(int j=1;j<=13;j++)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3301      	adds	r3, #1
 8000314:	607b      	str	r3, [r7, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2b0d      	cmp	r3, #13
 800031a:	ddf3      	ble.n	8000304 <init_task_dummy+0x5c>
		}
		psp_of_tasks[i]=(uint32_t)pPSP;
 800031c:	68fa      	ldr	r2, [r7, #12]
 800031e:	490d      	ldr	r1, [pc, #52]	; (8000354 <init_task_dummy+0xac>)
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<4;i++)
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	3301      	adds	r3, #1
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	2b03      	cmp	r3, #3
 8000330:	ddcc      	ble.n	80002cc <init_task_dummy+0x24>



	}

}
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	3714      	adds	r7, #20
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	08000211 	.word	0x08000211
 8000344:	200000a0 	.word	0x200000a0
 8000348:	08000221 	.word	0x08000221
 800034c:	08000231 	.word	0x08000231
 8000350:	08000241 	.word	0x08000241
 8000354:	20000000 	.word	0x20000000

08000358 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack) //naked funtion because cant access CPU registers in C
{
 8000358:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0"::"r"(sched_top_of_stack):);
 800035a:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR"); //no epilogue that's why BX LR
 800035e:	4770      	bx	lr
}
 8000360:	bf00      	nop
	...

08000364 <update_psp_of_task>:

void update_psp_of_task(uint32_t updated)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	psp_of_tasks[curr_task]=updated; //updates task1 PSP
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <update_psp_of_task+0x20>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4905      	ldr	r1, [pc, #20]	; (8000388 <update_psp_of_task+0x24>)
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	20000090 	.word	0x20000090
 8000388:	20000000 	.word	0x20000000

0800038c <next_task>:
int next_task()
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
	curr_task++;
 8000390:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <next_task+0x30>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	3301      	adds	r3, #1
 8000396:	4a09      	ldr	r2, [pc, #36]	; (80003bc <next_task+0x30>)
 8000398:	6013      	str	r3, [r2, #0]
	curr_task = curr_task%4;
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <next_task+0x30>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f003 0303 	and.w	r3, r3, #3
 80003a2:	4a06      	ldr	r2, [pc, #24]	; (80003bc <next_task+0x30>)
 80003a4:	6013      	str	r3, [r2, #0]
	return(psp_of_tasks[curr_task]);//willbe passed as R0 arguement
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <next_task+0x30>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a05      	ldr	r2, [pc, #20]	; (80003c0 <next_task+0x34>)
 80003ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	20000090 	.word	0x20000090
 80003c0:	20000000 	.word	0x20000000

080003c4 <SysTick_Handler>:
__attribute ((naked))void SysTick_Handler (void)
{
	//this handler is running using MSP
	//1st task is to get PSP value
	__asm volatile ("MRS R0,PSP"); // since systick handler is using MSP so PSP holds the TASK1 PSP
 80003c4:	f3ef 8009 	mrs	r0, PSP
	//2nd task is to SF2 to store state of task1 lets say
	__asm volatile("STMDB R0!,{R4-R11}"); // NOW r1 HOLDS the PSP of task1 after pushing R4-R11
 80003c8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}"); // revisit
 80003cc:	b500      	push	{lr}
	//update the array index holding PSP for task1


	__asm volatile("BL update_psp_of_task"); //now R0 holding the value of new PSP for TASK1 is passed to
 80003ce:	f7ff ffc9 	bl	8000364 <update_psp_of_task>
	//update_psp_of_task function as an arguement
	__asm volatile("BL next_task");
 80003d2:	f7ff ffdb 	bl	800038c <next_task>

	//NOW r0 HOLDS THE PSP of task2
	//1st task is to retrieve the from stack mem to core

	__asm volatile("LDMIA R0!,{R4-R11}");
 80003d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("MSR PSP,R0"); //move address held in r0 to PSP
 80003da:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 80003de:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 80003e2:	4770      	bx	lr
}
 80003e4:	bf00      	nop
	...

080003e8 <enable_fault_handler>:

void enable_fault_handler()
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
	uint32_t* pSHCSR = (uint32_t*) 0xE000ED24;
 80003ee:	4b07      	ldr	r3, [pc, #28]	; (800040c <enable_fault_handler+0x24>)
 80003f0:	607b      	str	r3, [r7, #4]
	*pSHCSR|=(1<<16)|(1<<17)|(1<<18);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f443 22e0 	orr.w	r2, r3, #458752	; 0x70000
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	601a      	str	r2, [r3, #0]
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000ed24 	.word	0xe000ed24

08000410 <switch_sp_to_psp>:

__attribute ((naked)) void switch_sp_to_psp() //naked because have to access SFR which can only be accessed in assembly
{
	__asm volatile (".EQU SRAM__END,((0x20000000 + (1024 *128))-512) ");
	__asm volatile ("LDR R0,=SRAM__END ");
 8000410:	4804      	ldr	r0, [pc, #16]	; (8000424 <switch_sp_to_psp+0x14>)
	__asm volatile ("MSR PSP,R0"); //loading PSP with task1 PSP
 8000412:	f380 8809 	msr	PSP, r0
	__asm volatile("MOV R0,#0x02");
 8000416:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0"); //SWITCHES sp TO USE psp
 800041a:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 800041e:	4770      	bx	lr
}
 8000420:	bf00      	nop
 8000422:	0000      	.short	0x0000
 8000424:	2001fe00 	.word	0x2001fe00

08000428 <HardFault_Handler>:
void HardFault_Handler()
{}
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <MemManage_Handler>:
void MemManage_Handler()
{}
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr

08000444 <BusFault_Handler>:
void BusFault_Handler ()
{}
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr

08000452 <UsageFault_Handler>:
void UsageFault_Handler()
{}
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <ITM_SendChar+0x48>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <ITM_SendChar+0x48>)
 8000470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000474:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000476:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <ITM_SendChar+0x4c>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a0c      	ldr	r2, [pc, #48]	; (80004ac <ITM_SendChar+0x4c>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000482:	bf00      	nop
 8000484:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	2b00      	cmp	r3, #0
 8000490:	d0f8      	beq.n	8000484 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000492:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	6013      	str	r3, [r2, #0]
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	e000edfc 	.word	0xe000edfc
 80004ac:	e0000e00 	.word	0xe0000e00

080004b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	60f8      	str	r0, [r7, #12]
 80004b8:	60b9      	str	r1, [r7, #8]
 80004ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	e00a      	b.n	80004d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004c2:	f3af 8000 	nop.w
 80004c6:	4601      	mov	r1, r0
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	1c5a      	adds	r2, r3, #1
 80004cc:	60ba      	str	r2, [r7, #8]
 80004ce:	b2ca      	uxtb	r2, r1
 80004d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	3301      	adds	r3, #1
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	697a      	ldr	r2, [r7, #20]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	429a      	cmp	r2, r3
 80004de:	dbf0      	blt.n	80004c2 <_read+0x12>
	}

return len;
 80004e0:	687b      	ldr	r3, [r7, #4]
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3718      	adds	r7, #24
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b086      	sub	sp, #24
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	60f8      	str	r0, [r7, #12]
 80004f2:	60b9      	str	r1, [r7, #8]
 80004f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
 80004fa:	e009      	b.n	8000510 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	1c5a      	adds	r2, r3, #1
 8000500:	60ba      	str	r2, [r7, #8]
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff ffab 	bl	8000460 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	3301      	adds	r3, #1
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	697a      	ldr	r2, [r7, #20]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	429a      	cmp	r2, r3
 8000516:	dbf1      	blt.n	80004fc <_write+0x12>
	}
	return len;
 8000518:	687b      	ldr	r3, [r7, #4]
}
 800051a:	4618      	mov	r0, r3
 800051c:	3718      	adds	r7, #24
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <_close>:

int _close(int file)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
	return -1;
 800052a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800052e:	4618      	mov	r0, r3
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800054a:	605a      	str	r2, [r3, #4]
	return 0;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <_isatty>:

int _isatty(int file)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
	return 1;
 8000562:	2301      	movs	r3, #1
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	return 0;
 800057c:	2300      	movs	r3, #0
}
 800057e:	4618      	mov	r0, r3
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
	...

0800058c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000594:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <_sbrk+0x5c>)
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <_sbrk+0x60>)
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <_sbrk+0x64>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d102      	bne.n	80005ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <_sbrk+0x64>)
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <_sbrk+0x68>)
 80005ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <_sbrk+0x64>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	693a      	ldr	r2, [r7, #16]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d207      	bcs.n	80005cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005bc:	f000 f846 	bl	800064c <__errno>
 80005c0:	4603      	mov	r3, r0
 80005c2:	220c      	movs	r2, #12
 80005c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	e009      	b.n	80005e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <_sbrk+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <_sbrk+0x64>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <_sbrk+0x64>)
 80005dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20020000 	.word	0x20020000
 80005ec:	00000400 	.word	0x00000400
 80005f0:	20000094 	.word	0x20000094
 80005f4:	200000c0 	.word	0x200000c0

080005f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000600:	480c      	ldr	r0, [pc, #48]	; (8000634 <LoopForever+0x6>)
  ldr r1, =_edata
 8000602:	490d      	ldr	r1, [pc, #52]	; (8000638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000604:	4a0d      	ldr	r2, [pc, #52]	; (800063c <LoopForever+0xe>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000608:	e002      	b.n	8000610 <LoopCopyDataInit>

0800060a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800060c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060e:	3304      	adds	r3, #4

08000610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000614:	d3f9      	bcc.n	800060a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000618:	4c0a      	ldr	r4, [pc, #40]	; (8000644 <LoopForever+0x16>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800061c:	e001      	b.n	8000622 <LoopFillZerobss>

0800061e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000620:	3204      	adds	r2, #4

08000622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000624:	d3fb      	bcc.n	800061e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000626:	f000 f817 	bl	8000658 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062a:	f7ff fddd 	bl	80001e8 <main>

0800062e <LoopForever>:

LoopForever:
    b LoopForever
 800062e:	e7fe      	b.n	800062e <LoopForever>
  ldr   r0, =_estack
 8000630:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000638:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800063c:	08001100 	.word	0x08001100
  ldr r2, =_sbss
 8000640:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000644:	200000c0 	.word	0x200000c0

08000648 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000648:	e7fe      	b.n	8000648 <ADC_IRQHandler>
	...

0800064c <__errno>:
 800064c:	4b01      	ldr	r3, [pc, #4]	; (8000654 <__errno+0x8>)
 800064e:	6818      	ldr	r0, [r3, #0]
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000010 	.word	0x20000010

08000658 <__libc_init_array>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	4d0d      	ldr	r5, [pc, #52]	; (8000690 <__libc_init_array+0x38>)
 800065c:	4c0d      	ldr	r4, [pc, #52]	; (8000694 <__libc_init_array+0x3c>)
 800065e:	1b64      	subs	r4, r4, r5
 8000660:	10a4      	asrs	r4, r4, #2
 8000662:	2600      	movs	r6, #0
 8000664:	42a6      	cmp	r6, r4
 8000666:	d109      	bne.n	800067c <__libc_init_array+0x24>
 8000668:	4d0b      	ldr	r5, [pc, #44]	; (8000698 <__libc_init_array+0x40>)
 800066a:	4c0c      	ldr	r4, [pc, #48]	; (800069c <__libc_init_array+0x44>)
 800066c:	f000 fce6 	bl	800103c <_init>
 8000670:	1b64      	subs	r4, r4, r5
 8000672:	10a4      	asrs	r4, r4, #2
 8000674:	2600      	movs	r6, #0
 8000676:	42a6      	cmp	r6, r4
 8000678:	d105      	bne.n	8000686 <__libc_init_array+0x2e>
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000680:	4798      	blx	r3
 8000682:	3601      	adds	r6, #1
 8000684:	e7ee      	b.n	8000664 <__libc_init_array+0xc>
 8000686:	f855 3b04 	ldr.w	r3, [r5], #4
 800068a:	4798      	blx	r3
 800068c:	3601      	adds	r6, #1
 800068e:	e7f2      	b.n	8000676 <__libc_init_array+0x1e>
 8000690:	080010f8 	.word	0x080010f8
 8000694:	080010f8 	.word	0x080010f8
 8000698:	080010f8 	.word	0x080010f8
 800069c:	080010fc 	.word	0x080010fc

080006a0 <memset>:
 80006a0:	4402      	add	r2, r0
 80006a2:	4603      	mov	r3, r0
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d100      	bne.n	80006aa <memset+0xa>
 80006a8:	4770      	bx	lr
 80006aa:	f803 1b01 	strb.w	r1, [r3], #1
 80006ae:	e7f9      	b.n	80006a4 <memset+0x4>

080006b0 <_puts_r>:
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	460e      	mov	r6, r1
 80006b4:	4605      	mov	r5, r0
 80006b6:	b118      	cbz	r0, 80006c0 <_puts_r+0x10>
 80006b8:	6983      	ldr	r3, [r0, #24]
 80006ba:	b90b      	cbnz	r3, 80006c0 <_puts_r+0x10>
 80006bc:	f000 fa48 	bl	8000b50 <__sinit>
 80006c0:	69ab      	ldr	r3, [r5, #24]
 80006c2:	68ac      	ldr	r4, [r5, #8]
 80006c4:	b913      	cbnz	r3, 80006cc <_puts_r+0x1c>
 80006c6:	4628      	mov	r0, r5
 80006c8:	f000 fa42 	bl	8000b50 <__sinit>
 80006cc:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <_puts_r+0xd0>)
 80006ce:	429c      	cmp	r4, r3
 80006d0:	d120      	bne.n	8000714 <_puts_r+0x64>
 80006d2:	686c      	ldr	r4, [r5, #4]
 80006d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006d6:	07db      	lsls	r3, r3, #31
 80006d8:	d405      	bmi.n	80006e6 <_puts_r+0x36>
 80006da:	89a3      	ldrh	r3, [r4, #12]
 80006dc:	0598      	lsls	r0, r3, #22
 80006de:	d402      	bmi.n	80006e6 <_puts_r+0x36>
 80006e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006e2:	f000 fad3 	bl	8000c8c <__retarget_lock_acquire_recursive>
 80006e6:	89a3      	ldrh	r3, [r4, #12]
 80006e8:	0719      	lsls	r1, r3, #28
 80006ea:	d51d      	bpl.n	8000728 <_puts_r+0x78>
 80006ec:	6923      	ldr	r3, [r4, #16]
 80006ee:	b1db      	cbz	r3, 8000728 <_puts_r+0x78>
 80006f0:	3e01      	subs	r6, #1
 80006f2:	68a3      	ldr	r3, [r4, #8]
 80006f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006f8:	3b01      	subs	r3, #1
 80006fa:	60a3      	str	r3, [r4, #8]
 80006fc:	bb39      	cbnz	r1, 800074e <_puts_r+0x9e>
 80006fe:	2b00      	cmp	r3, #0
 8000700:	da38      	bge.n	8000774 <_puts_r+0xc4>
 8000702:	4622      	mov	r2, r4
 8000704:	210a      	movs	r1, #10
 8000706:	4628      	mov	r0, r5
 8000708:	f000 f848 	bl	800079c <__swbuf_r>
 800070c:	3001      	adds	r0, #1
 800070e:	d011      	beq.n	8000734 <_puts_r+0x84>
 8000710:	250a      	movs	r5, #10
 8000712:	e011      	b.n	8000738 <_puts_r+0x88>
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <_puts_r+0xd4>)
 8000716:	429c      	cmp	r4, r3
 8000718:	d101      	bne.n	800071e <_puts_r+0x6e>
 800071a:	68ac      	ldr	r4, [r5, #8]
 800071c:	e7da      	b.n	80006d4 <_puts_r+0x24>
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <_puts_r+0xd8>)
 8000720:	429c      	cmp	r4, r3
 8000722:	bf08      	it	eq
 8000724:	68ec      	ldreq	r4, [r5, #12]
 8000726:	e7d5      	b.n	80006d4 <_puts_r+0x24>
 8000728:	4621      	mov	r1, r4
 800072a:	4628      	mov	r0, r5
 800072c:	f000 f888 	bl	8000840 <__swsetup_r>
 8000730:	2800      	cmp	r0, #0
 8000732:	d0dd      	beq.n	80006f0 <_puts_r+0x40>
 8000734:	f04f 35ff 	mov.w	r5, #4294967295
 8000738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800073a:	07da      	lsls	r2, r3, #31
 800073c:	d405      	bmi.n	800074a <_puts_r+0x9a>
 800073e:	89a3      	ldrh	r3, [r4, #12]
 8000740:	059b      	lsls	r3, r3, #22
 8000742:	d402      	bmi.n	800074a <_puts_r+0x9a>
 8000744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000746:	f000 faa2 	bl	8000c8e <__retarget_lock_release_recursive>
 800074a:	4628      	mov	r0, r5
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	2b00      	cmp	r3, #0
 8000750:	da04      	bge.n	800075c <_puts_r+0xac>
 8000752:	69a2      	ldr	r2, [r4, #24]
 8000754:	429a      	cmp	r2, r3
 8000756:	dc06      	bgt.n	8000766 <_puts_r+0xb6>
 8000758:	290a      	cmp	r1, #10
 800075a:	d004      	beq.n	8000766 <_puts_r+0xb6>
 800075c:	6823      	ldr	r3, [r4, #0]
 800075e:	1c5a      	adds	r2, r3, #1
 8000760:	6022      	str	r2, [r4, #0]
 8000762:	7019      	strb	r1, [r3, #0]
 8000764:	e7c5      	b.n	80006f2 <_puts_r+0x42>
 8000766:	4622      	mov	r2, r4
 8000768:	4628      	mov	r0, r5
 800076a:	f000 f817 	bl	800079c <__swbuf_r>
 800076e:	3001      	adds	r0, #1
 8000770:	d1bf      	bne.n	80006f2 <_puts_r+0x42>
 8000772:	e7df      	b.n	8000734 <_puts_r+0x84>
 8000774:	6823      	ldr	r3, [r4, #0]
 8000776:	250a      	movs	r5, #10
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	6022      	str	r2, [r4, #0]
 800077c:	701d      	strb	r5, [r3, #0]
 800077e:	e7db      	b.n	8000738 <_puts_r+0x88>
 8000780:	080010b8 	.word	0x080010b8
 8000784:	080010d8 	.word	0x080010d8
 8000788:	08001098 	.word	0x08001098

0800078c <puts>:
 800078c:	4b02      	ldr	r3, [pc, #8]	; (8000798 <puts+0xc>)
 800078e:	4601      	mov	r1, r0
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	f7ff bf8d 	b.w	80006b0 <_puts_r>
 8000796:	bf00      	nop
 8000798:	20000010 	.word	0x20000010

0800079c <__swbuf_r>:
 800079c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079e:	460e      	mov	r6, r1
 80007a0:	4614      	mov	r4, r2
 80007a2:	4605      	mov	r5, r0
 80007a4:	b118      	cbz	r0, 80007ae <__swbuf_r+0x12>
 80007a6:	6983      	ldr	r3, [r0, #24]
 80007a8:	b90b      	cbnz	r3, 80007ae <__swbuf_r+0x12>
 80007aa:	f000 f9d1 	bl	8000b50 <__sinit>
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <__swbuf_r+0x98>)
 80007b0:	429c      	cmp	r4, r3
 80007b2:	d12b      	bne.n	800080c <__swbuf_r+0x70>
 80007b4:	686c      	ldr	r4, [r5, #4]
 80007b6:	69a3      	ldr	r3, [r4, #24]
 80007b8:	60a3      	str	r3, [r4, #8]
 80007ba:	89a3      	ldrh	r3, [r4, #12]
 80007bc:	071a      	lsls	r2, r3, #28
 80007be:	d52f      	bpl.n	8000820 <__swbuf_r+0x84>
 80007c0:	6923      	ldr	r3, [r4, #16]
 80007c2:	b36b      	cbz	r3, 8000820 <__swbuf_r+0x84>
 80007c4:	6923      	ldr	r3, [r4, #16]
 80007c6:	6820      	ldr	r0, [r4, #0]
 80007c8:	1ac0      	subs	r0, r0, r3
 80007ca:	6963      	ldr	r3, [r4, #20]
 80007cc:	b2f6      	uxtb	r6, r6
 80007ce:	4283      	cmp	r3, r0
 80007d0:	4637      	mov	r7, r6
 80007d2:	dc04      	bgt.n	80007de <__swbuf_r+0x42>
 80007d4:	4621      	mov	r1, r4
 80007d6:	4628      	mov	r0, r5
 80007d8:	f000 f926 	bl	8000a28 <_fflush_r>
 80007dc:	bb30      	cbnz	r0, 800082c <__swbuf_r+0x90>
 80007de:	68a3      	ldr	r3, [r4, #8]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	60a3      	str	r3, [r4, #8]
 80007e4:	6823      	ldr	r3, [r4, #0]
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	6022      	str	r2, [r4, #0]
 80007ea:	701e      	strb	r6, [r3, #0]
 80007ec:	6963      	ldr	r3, [r4, #20]
 80007ee:	3001      	adds	r0, #1
 80007f0:	4283      	cmp	r3, r0
 80007f2:	d004      	beq.n	80007fe <__swbuf_r+0x62>
 80007f4:	89a3      	ldrh	r3, [r4, #12]
 80007f6:	07db      	lsls	r3, r3, #31
 80007f8:	d506      	bpl.n	8000808 <__swbuf_r+0x6c>
 80007fa:	2e0a      	cmp	r6, #10
 80007fc:	d104      	bne.n	8000808 <__swbuf_r+0x6c>
 80007fe:	4621      	mov	r1, r4
 8000800:	4628      	mov	r0, r5
 8000802:	f000 f911 	bl	8000a28 <_fflush_r>
 8000806:	b988      	cbnz	r0, 800082c <__swbuf_r+0x90>
 8000808:	4638      	mov	r0, r7
 800080a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <__swbuf_r+0x9c>)
 800080e:	429c      	cmp	r4, r3
 8000810:	d101      	bne.n	8000816 <__swbuf_r+0x7a>
 8000812:	68ac      	ldr	r4, [r5, #8]
 8000814:	e7cf      	b.n	80007b6 <__swbuf_r+0x1a>
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <__swbuf_r+0xa0>)
 8000818:	429c      	cmp	r4, r3
 800081a:	bf08      	it	eq
 800081c:	68ec      	ldreq	r4, [r5, #12]
 800081e:	e7ca      	b.n	80007b6 <__swbuf_r+0x1a>
 8000820:	4621      	mov	r1, r4
 8000822:	4628      	mov	r0, r5
 8000824:	f000 f80c 	bl	8000840 <__swsetup_r>
 8000828:	2800      	cmp	r0, #0
 800082a:	d0cb      	beq.n	80007c4 <__swbuf_r+0x28>
 800082c:	f04f 37ff 	mov.w	r7, #4294967295
 8000830:	e7ea      	b.n	8000808 <__swbuf_r+0x6c>
 8000832:	bf00      	nop
 8000834:	080010b8 	.word	0x080010b8
 8000838:	080010d8 	.word	0x080010d8
 800083c:	08001098 	.word	0x08001098

08000840 <__swsetup_r>:
 8000840:	4b32      	ldr	r3, [pc, #200]	; (800090c <__swsetup_r+0xcc>)
 8000842:	b570      	push	{r4, r5, r6, lr}
 8000844:	681d      	ldr	r5, [r3, #0]
 8000846:	4606      	mov	r6, r0
 8000848:	460c      	mov	r4, r1
 800084a:	b125      	cbz	r5, 8000856 <__swsetup_r+0x16>
 800084c:	69ab      	ldr	r3, [r5, #24]
 800084e:	b913      	cbnz	r3, 8000856 <__swsetup_r+0x16>
 8000850:	4628      	mov	r0, r5
 8000852:	f000 f97d 	bl	8000b50 <__sinit>
 8000856:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <__swsetup_r+0xd0>)
 8000858:	429c      	cmp	r4, r3
 800085a:	d10f      	bne.n	800087c <__swsetup_r+0x3c>
 800085c:	686c      	ldr	r4, [r5, #4]
 800085e:	89a3      	ldrh	r3, [r4, #12]
 8000860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000864:	0719      	lsls	r1, r3, #28
 8000866:	d42c      	bmi.n	80008c2 <__swsetup_r+0x82>
 8000868:	06dd      	lsls	r5, r3, #27
 800086a:	d411      	bmi.n	8000890 <__swsetup_r+0x50>
 800086c:	2309      	movs	r3, #9
 800086e:	6033      	str	r3, [r6, #0]
 8000870:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000874:	81a3      	strh	r3, [r4, #12]
 8000876:	f04f 30ff 	mov.w	r0, #4294967295
 800087a:	e03e      	b.n	80008fa <__swsetup_r+0xba>
 800087c:	4b25      	ldr	r3, [pc, #148]	; (8000914 <__swsetup_r+0xd4>)
 800087e:	429c      	cmp	r4, r3
 8000880:	d101      	bne.n	8000886 <__swsetup_r+0x46>
 8000882:	68ac      	ldr	r4, [r5, #8]
 8000884:	e7eb      	b.n	800085e <__swsetup_r+0x1e>
 8000886:	4b24      	ldr	r3, [pc, #144]	; (8000918 <__swsetup_r+0xd8>)
 8000888:	429c      	cmp	r4, r3
 800088a:	bf08      	it	eq
 800088c:	68ec      	ldreq	r4, [r5, #12]
 800088e:	e7e6      	b.n	800085e <__swsetup_r+0x1e>
 8000890:	0758      	lsls	r0, r3, #29
 8000892:	d512      	bpl.n	80008ba <__swsetup_r+0x7a>
 8000894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000896:	b141      	cbz	r1, 80008aa <__swsetup_r+0x6a>
 8000898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800089c:	4299      	cmp	r1, r3
 800089e:	d002      	beq.n	80008a6 <__swsetup_r+0x66>
 80008a0:	4630      	mov	r0, r6
 80008a2:	f000 fa59 	bl	8000d58 <_free_r>
 80008a6:	2300      	movs	r3, #0
 80008a8:	6363      	str	r3, [r4, #52]	; 0x34
 80008aa:	89a3      	ldrh	r3, [r4, #12]
 80008ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008b0:	81a3      	strh	r3, [r4, #12]
 80008b2:	2300      	movs	r3, #0
 80008b4:	6063      	str	r3, [r4, #4]
 80008b6:	6923      	ldr	r3, [r4, #16]
 80008b8:	6023      	str	r3, [r4, #0]
 80008ba:	89a3      	ldrh	r3, [r4, #12]
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	81a3      	strh	r3, [r4, #12]
 80008c2:	6923      	ldr	r3, [r4, #16]
 80008c4:	b94b      	cbnz	r3, 80008da <__swsetup_r+0x9a>
 80008c6:	89a3      	ldrh	r3, [r4, #12]
 80008c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80008cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008d0:	d003      	beq.n	80008da <__swsetup_r+0x9a>
 80008d2:	4621      	mov	r1, r4
 80008d4:	4630      	mov	r0, r6
 80008d6:	f000 f9ff 	bl	8000cd8 <__smakebuf_r>
 80008da:	89a0      	ldrh	r0, [r4, #12]
 80008dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008e0:	f010 0301 	ands.w	r3, r0, #1
 80008e4:	d00a      	beq.n	80008fc <__swsetup_r+0xbc>
 80008e6:	2300      	movs	r3, #0
 80008e8:	60a3      	str	r3, [r4, #8]
 80008ea:	6963      	ldr	r3, [r4, #20]
 80008ec:	425b      	negs	r3, r3
 80008ee:	61a3      	str	r3, [r4, #24]
 80008f0:	6923      	ldr	r3, [r4, #16]
 80008f2:	b943      	cbnz	r3, 8000906 <__swsetup_r+0xc6>
 80008f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80008f8:	d1ba      	bne.n	8000870 <__swsetup_r+0x30>
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	0781      	lsls	r1, r0, #30
 80008fe:	bf58      	it	pl
 8000900:	6963      	ldrpl	r3, [r4, #20]
 8000902:	60a3      	str	r3, [r4, #8]
 8000904:	e7f4      	b.n	80008f0 <__swsetup_r+0xb0>
 8000906:	2000      	movs	r0, #0
 8000908:	e7f7      	b.n	80008fa <__swsetup_r+0xba>
 800090a:	bf00      	nop
 800090c:	20000010 	.word	0x20000010
 8000910:	080010b8 	.word	0x080010b8
 8000914:	080010d8 	.word	0x080010d8
 8000918:	08001098 	.word	0x08001098

0800091c <__sflush_r>:
 800091c:	898a      	ldrh	r2, [r1, #12]
 800091e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000922:	4605      	mov	r5, r0
 8000924:	0710      	lsls	r0, r2, #28
 8000926:	460c      	mov	r4, r1
 8000928:	d458      	bmi.n	80009dc <__sflush_r+0xc0>
 800092a:	684b      	ldr	r3, [r1, #4]
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc05      	bgt.n	800093c <__sflush_r+0x20>
 8000930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000932:	2b00      	cmp	r3, #0
 8000934:	dc02      	bgt.n	800093c <__sflush_r+0x20>
 8000936:	2000      	movs	r0, #0
 8000938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800093c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800093e:	2e00      	cmp	r6, #0
 8000940:	d0f9      	beq.n	8000936 <__sflush_r+0x1a>
 8000942:	2300      	movs	r3, #0
 8000944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000948:	682f      	ldr	r7, [r5, #0]
 800094a:	602b      	str	r3, [r5, #0]
 800094c:	d032      	beq.n	80009b4 <__sflush_r+0x98>
 800094e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000950:	89a3      	ldrh	r3, [r4, #12]
 8000952:	075a      	lsls	r2, r3, #29
 8000954:	d505      	bpl.n	8000962 <__sflush_r+0x46>
 8000956:	6863      	ldr	r3, [r4, #4]
 8000958:	1ac0      	subs	r0, r0, r3
 800095a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800095c:	b10b      	cbz	r3, 8000962 <__sflush_r+0x46>
 800095e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000960:	1ac0      	subs	r0, r0, r3
 8000962:	2300      	movs	r3, #0
 8000964:	4602      	mov	r2, r0
 8000966:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000968:	6a21      	ldr	r1, [r4, #32]
 800096a:	4628      	mov	r0, r5
 800096c:	47b0      	blx	r6
 800096e:	1c43      	adds	r3, r0, #1
 8000970:	89a3      	ldrh	r3, [r4, #12]
 8000972:	d106      	bne.n	8000982 <__sflush_r+0x66>
 8000974:	6829      	ldr	r1, [r5, #0]
 8000976:	291d      	cmp	r1, #29
 8000978:	d82c      	bhi.n	80009d4 <__sflush_r+0xb8>
 800097a:	4a2a      	ldr	r2, [pc, #168]	; (8000a24 <__sflush_r+0x108>)
 800097c:	40ca      	lsrs	r2, r1
 800097e:	07d6      	lsls	r6, r2, #31
 8000980:	d528      	bpl.n	80009d4 <__sflush_r+0xb8>
 8000982:	2200      	movs	r2, #0
 8000984:	6062      	str	r2, [r4, #4]
 8000986:	04d9      	lsls	r1, r3, #19
 8000988:	6922      	ldr	r2, [r4, #16]
 800098a:	6022      	str	r2, [r4, #0]
 800098c:	d504      	bpl.n	8000998 <__sflush_r+0x7c>
 800098e:	1c42      	adds	r2, r0, #1
 8000990:	d101      	bne.n	8000996 <__sflush_r+0x7a>
 8000992:	682b      	ldr	r3, [r5, #0]
 8000994:	b903      	cbnz	r3, 8000998 <__sflush_r+0x7c>
 8000996:	6560      	str	r0, [r4, #84]	; 0x54
 8000998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800099a:	602f      	str	r7, [r5, #0]
 800099c:	2900      	cmp	r1, #0
 800099e:	d0ca      	beq.n	8000936 <__sflush_r+0x1a>
 80009a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009a4:	4299      	cmp	r1, r3
 80009a6:	d002      	beq.n	80009ae <__sflush_r+0x92>
 80009a8:	4628      	mov	r0, r5
 80009aa:	f000 f9d5 	bl	8000d58 <_free_r>
 80009ae:	2000      	movs	r0, #0
 80009b0:	6360      	str	r0, [r4, #52]	; 0x34
 80009b2:	e7c1      	b.n	8000938 <__sflush_r+0x1c>
 80009b4:	6a21      	ldr	r1, [r4, #32]
 80009b6:	2301      	movs	r3, #1
 80009b8:	4628      	mov	r0, r5
 80009ba:	47b0      	blx	r6
 80009bc:	1c41      	adds	r1, r0, #1
 80009be:	d1c7      	bne.n	8000950 <__sflush_r+0x34>
 80009c0:	682b      	ldr	r3, [r5, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0c4      	beq.n	8000950 <__sflush_r+0x34>
 80009c6:	2b1d      	cmp	r3, #29
 80009c8:	d001      	beq.n	80009ce <__sflush_r+0xb2>
 80009ca:	2b16      	cmp	r3, #22
 80009cc:	d101      	bne.n	80009d2 <__sflush_r+0xb6>
 80009ce:	602f      	str	r7, [r5, #0]
 80009d0:	e7b1      	b.n	8000936 <__sflush_r+0x1a>
 80009d2:	89a3      	ldrh	r3, [r4, #12]
 80009d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d8:	81a3      	strh	r3, [r4, #12]
 80009da:	e7ad      	b.n	8000938 <__sflush_r+0x1c>
 80009dc:	690f      	ldr	r7, [r1, #16]
 80009de:	2f00      	cmp	r7, #0
 80009e0:	d0a9      	beq.n	8000936 <__sflush_r+0x1a>
 80009e2:	0793      	lsls	r3, r2, #30
 80009e4:	680e      	ldr	r6, [r1, #0]
 80009e6:	bf08      	it	eq
 80009e8:	694b      	ldreq	r3, [r1, #20]
 80009ea:	600f      	str	r7, [r1, #0]
 80009ec:	bf18      	it	ne
 80009ee:	2300      	movne	r3, #0
 80009f0:	eba6 0807 	sub.w	r8, r6, r7
 80009f4:	608b      	str	r3, [r1, #8]
 80009f6:	f1b8 0f00 	cmp.w	r8, #0
 80009fa:	dd9c      	ble.n	8000936 <__sflush_r+0x1a>
 80009fc:	6a21      	ldr	r1, [r4, #32]
 80009fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a00:	4643      	mov	r3, r8
 8000a02:	463a      	mov	r2, r7
 8000a04:	4628      	mov	r0, r5
 8000a06:	47b0      	blx	r6
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	dc06      	bgt.n	8000a1a <__sflush_r+0xfe>
 8000a0c:	89a3      	ldrh	r3, [r4, #12]
 8000a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a12:	81a3      	strh	r3, [r4, #12]
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	e78e      	b.n	8000938 <__sflush_r+0x1c>
 8000a1a:	4407      	add	r7, r0
 8000a1c:	eba8 0800 	sub.w	r8, r8, r0
 8000a20:	e7e9      	b.n	80009f6 <__sflush_r+0xda>
 8000a22:	bf00      	nop
 8000a24:	20400001 	.word	0x20400001

08000a28 <_fflush_r>:
 8000a28:	b538      	push	{r3, r4, r5, lr}
 8000a2a:	690b      	ldr	r3, [r1, #16]
 8000a2c:	4605      	mov	r5, r0
 8000a2e:	460c      	mov	r4, r1
 8000a30:	b913      	cbnz	r3, 8000a38 <_fflush_r+0x10>
 8000a32:	2500      	movs	r5, #0
 8000a34:	4628      	mov	r0, r5
 8000a36:	bd38      	pop	{r3, r4, r5, pc}
 8000a38:	b118      	cbz	r0, 8000a42 <_fflush_r+0x1a>
 8000a3a:	6983      	ldr	r3, [r0, #24]
 8000a3c:	b90b      	cbnz	r3, 8000a42 <_fflush_r+0x1a>
 8000a3e:	f000 f887 	bl	8000b50 <__sinit>
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <_fflush_r+0x6c>)
 8000a44:	429c      	cmp	r4, r3
 8000a46:	d11b      	bne.n	8000a80 <_fflush_r+0x58>
 8000a48:	686c      	ldr	r4, [r5, #4]
 8000a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0ef      	beq.n	8000a32 <_fflush_r+0xa>
 8000a52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a54:	07d0      	lsls	r0, r2, #31
 8000a56:	d404      	bmi.n	8000a62 <_fflush_r+0x3a>
 8000a58:	0599      	lsls	r1, r3, #22
 8000a5a:	d402      	bmi.n	8000a62 <_fflush_r+0x3a>
 8000a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a5e:	f000 f915 	bl	8000c8c <__retarget_lock_acquire_recursive>
 8000a62:	4628      	mov	r0, r5
 8000a64:	4621      	mov	r1, r4
 8000a66:	f7ff ff59 	bl	800091c <__sflush_r>
 8000a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a6c:	07da      	lsls	r2, r3, #31
 8000a6e:	4605      	mov	r5, r0
 8000a70:	d4e0      	bmi.n	8000a34 <_fflush_r+0xc>
 8000a72:	89a3      	ldrh	r3, [r4, #12]
 8000a74:	059b      	lsls	r3, r3, #22
 8000a76:	d4dd      	bmi.n	8000a34 <_fflush_r+0xc>
 8000a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a7a:	f000 f908 	bl	8000c8e <__retarget_lock_release_recursive>
 8000a7e:	e7d9      	b.n	8000a34 <_fflush_r+0xc>
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <_fflush_r+0x70>)
 8000a82:	429c      	cmp	r4, r3
 8000a84:	d101      	bne.n	8000a8a <_fflush_r+0x62>
 8000a86:	68ac      	ldr	r4, [r5, #8]
 8000a88:	e7df      	b.n	8000a4a <_fflush_r+0x22>
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <_fflush_r+0x74>)
 8000a8c:	429c      	cmp	r4, r3
 8000a8e:	bf08      	it	eq
 8000a90:	68ec      	ldreq	r4, [r5, #12]
 8000a92:	e7da      	b.n	8000a4a <_fflush_r+0x22>
 8000a94:	080010b8 	.word	0x080010b8
 8000a98:	080010d8 	.word	0x080010d8
 8000a9c:	08001098 	.word	0x08001098

08000aa0 <std>:
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	b510      	push	{r4, lr}
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8000aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000aae:	6083      	str	r3, [r0, #8]
 8000ab0:	8181      	strh	r1, [r0, #12]
 8000ab2:	6643      	str	r3, [r0, #100]	; 0x64
 8000ab4:	81c2      	strh	r2, [r0, #14]
 8000ab6:	6183      	str	r3, [r0, #24]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	2208      	movs	r2, #8
 8000abc:	305c      	adds	r0, #92	; 0x5c
 8000abe:	f7ff fdef 	bl	80006a0 <memset>
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <std+0x38>)
 8000ac4:	6263      	str	r3, [r4, #36]	; 0x24
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <std+0x3c>)
 8000ac8:	62a3      	str	r3, [r4, #40]	; 0x28
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <std+0x40>)
 8000acc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <std+0x44>)
 8000ad0:	6224      	str	r4, [r4, #32]
 8000ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8000ad4:	bd10      	pop	{r4, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08000ecd 	.word	0x08000ecd
 8000adc:	08000eef 	.word	0x08000eef
 8000ae0:	08000f27 	.word	0x08000f27
 8000ae4:	08000f4b 	.word	0x08000f4b

08000ae8 <_cleanup_r>:
 8000ae8:	4901      	ldr	r1, [pc, #4]	; (8000af0 <_cleanup_r+0x8>)
 8000aea:	f000 b8af 	b.w	8000c4c <_fwalk_reent>
 8000aee:	bf00      	nop
 8000af0:	08000a29 	.word	0x08000a29

08000af4 <__sfmoreglue>:
 8000af4:	b570      	push	{r4, r5, r6, lr}
 8000af6:	1e4a      	subs	r2, r1, #1
 8000af8:	2568      	movs	r5, #104	; 0x68
 8000afa:	4355      	muls	r5, r2
 8000afc:	460e      	mov	r6, r1
 8000afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b02:	f000 f979 	bl	8000df8 <_malloc_r>
 8000b06:	4604      	mov	r4, r0
 8000b08:	b140      	cbz	r0, 8000b1c <__sfmoreglue+0x28>
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8000b10:	300c      	adds	r0, #12
 8000b12:	60a0      	str	r0, [r4, #8]
 8000b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b18:	f7ff fdc2 	bl	80006a0 <memset>
 8000b1c:	4620      	mov	r0, r4
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}

08000b20 <__sfp_lock_acquire>:
 8000b20:	4801      	ldr	r0, [pc, #4]	; (8000b28 <__sfp_lock_acquire+0x8>)
 8000b22:	f000 b8b3 	b.w	8000c8c <__retarget_lock_acquire_recursive>
 8000b26:	bf00      	nop
 8000b28:	200000b8 	.word	0x200000b8

08000b2c <__sfp_lock_release>:
 8000b2c:	4801      	ldr	r0, [pc, #4]	; (8000b34 <__sfp_lock_release+0x8>)
 8000b2e:	f000 b8ae 	b.w	8000c8e <__retarget_lock_release_recursive>
 8000b32:	bf00      	nop
 8000b34:	200000b8 	.word	0x200000b8

08000b38 <__sinit_lock_acquire>:
 8000b38:	4801      	ldr	r0, [pc, #4]	; (8000b40 <__sinit_lock_acquire+0x8>)
 8000b3a:	f000 b8a7 	b.w	8000c8c <__retarget_lock_acquire_recursive>
 8000b3e:	bf00      	nop
 8000b40:	200000b3 	.word	0x200000b3

08000b44 <__sinit_lock_release>:
 8000b44:	4801      	ldr	r0, [pc, #4]	; (8000b4c <__sinit_lock_release+0x8>)
 8000b46:	f000 b8a2 	b.w	8000c8e <__retarget_lock_release_recursive>
 8000b4a:	bf00      	nop
 8000b4c:	200000b3 	.word	0x200000b3

08000b50 <__sinit>:
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4604      	mov	r4, r0
 8000b54:	f7ff fff0 	bl	8000b38 <__sinit_lock_acquire>
 8000b58:	69a3      	ldr	r3, [r4, #24]
 8000b5a:	b11b      	cbz	r3, 8000b64 <__sinit+0x14>
 8000b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b60:	f7ff bff0 	b.w	8000b44 <__sinit_lock_release>
 8000b64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b68:	6523      	str	r3, [r4, #80]	; 0x50
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <__sinit+0x68>)
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <__sinit+0x6c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b72:	42a3      	cmp	r3, r4
 8000b74:	bf04      	itt	eq
 8000b76:	2301      	moveq	r3, #1
 8000b78:	61a3      	streq	r3, [r4, #24]
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	f000 f820 	bl	8000bc0 <__sfp>
 8000b80:	6060      	str	r0, [r4, #4]
 8000b82:	4620      	mov	r0, r4
 8000b84:	f000 f81c 	bl	8000bc0 <__sfp>
 8000b88:	60a0      	str	r0, [r4, #8]
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	f000 f818 	bl	8000bc0 <__sfp>
 8000b90:	2200      	movs	r2, #0
 8000b92:	60e0      	str	r0, [r4, #12]
 8000b94:	2104      	movs	r1, #4
 8000b96:	6860      	ldr	r0, [r4, #4]
 8000b98:	f7ff ff82 	bl	8000aa0 <std>
 8000b9c:	68a0      	ldr	r0, [r4, #8]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2109      	movs	r1, #9
 8000ba2:	f7ff ff7d 	bl	8000aa0 <std>
 8000ba6:	68e0      	ldr	r0, [r4, #12]
 8000ba8:	2202      	movs	r2, #2
 8000baa:	2112      	movs	r1, #18
 8000bac:	f7ff ff78 	bl	8000aa0 <std>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61a3      	str	r3, [r4, #24]
 8000bb4:	e7d2      	b.n	8000b5c <__sinit+0xc>
 8000bb6:	bf00      	nop
 8000bb8:	08001094 	.word	0x08001094
 8000bbc:	08000ae9 	.word	0x08000ae9

08000bc0 <__sfp>:
 8000bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc2:	4607      	mov	r7, r0
 8000bc4:	f7ff ffac 	bl	8000b20 <__sfp_lock_acquire>
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <__sfp+0x84>)
 8000bca:	681e      	ldr	r6, [r3, #0]
 8000bcc:	69b3      	ldr	r3, [r6, #24]
 8000bce:	b913      	cbnz	r3, 8000bd6 <__sfp+0x16>
 8000bd0:	4630      	mov	r0, r6
 8000bd2:	f7ff ffbd 	bl	8000b50 <__sinit>
 8000bd6:	3648      	adds	r6, #72	; 0x48
 8000bd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	d503      	bpl.n	8000be8 <__sfp+0x28>
 8000be0:	6833      	ldr	r3, [r6, #0]
 8000be2:	b30b      	cbz	r3, 8000c28 <__sfp+0x68>
 8000be4:	6836      	ldr	r6, [r6, #0]
 8000be6:	e7f7      	b.n	8000bd8 <__sfp+0x18>
 8000be8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000bec:	b9d5      	cbnz	r5, 8000c24 <__sfp+0x64>
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <__sfp+0x88>)
 8000bf0:	60e3      	str	r3, [r4, #12]
 8000bf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000bf6:	6665      	str	r5, [r4, #100]	; 0x64
 8000bf8:	f000 f847 	bl	8000c8a <__retarget_lock_init_recursive>
 8000bfc:	f7ff ff96 	bl	8000b2c <__sfp_lock_release>
 8000c00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c08:	6025      	str	r5, [r4, #0]
 8000c0a:	61a5      	str	r5, [r4, #24]
 8000c0c:	2208      	movs	r2, #8
 8000c0e:	4629      	mov	r1, r5
 8000c10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c14:	f7ff fd44 	bl	80006a0 <memset>
 8000c18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c20:	4620      	mov	r0, r4
 8000c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c24:	3468      	adds	r4, #104	; 0x68
 8000c26:	e7d9      	b.n	8000bdc <__sfp+0x1c>
 8000c28:	2104      	movs	r1, #4
 8000c2a:	4638      	mov	r0, r7
 8000c2c:	f7ff ff62 	bl	8000af4 <__sfmoreglue>
 8000c30:	4604      	mov	r4, r0
 8000c32:	6030      	str	r0, [r6, #0]
 8000c34:	2800      	cmp	r0, #0
 8000c36:	d1d5      	bne.n	8000be4 <__sfp+0x24>
 8000c38:	f7ff ff78 	bl	8000b2c <__sfp_lock_release>
 8000c3c:	230c      	movs	r3, #12
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	e7ee      	b.n	8000c20 <__sfp+0x60>
 8000c42:	bf00      	nop
 8000c44:	08001094 	.word	0x08001094
 8000c48:	ffff0001 	.word	0xffff0001

08000c4c <_fwalk_reent>:
 8000c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c50:	4606      	mov	r6, r0
 8000c52:	4688      	mov	r8, r1
 8000c54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c58:	2700      	movs	r7, #0
 8000c5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c5e:	f1b9 0901 	subs.w	r9, r9, #1
 8000c62:	d505      	bpl.n	8000c70 <_fwalk_reent+0x24>
 8000c64:	6824      	ldr	r4, [r4, #0]
 8000c66:	2c00      	cmp	r4, #0
 8000c68:	d1f7      	bne.n	8000c5a <_fwalk_reent+0xe>
 8000c6a:	4638      	mov	r0, r7
 8000c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c70:	89ab      	ldrh	r3, [r5, #12]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d907      	bls.n	8000c86 <_fwalk_reent+0x3a>
 8000c76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	d003      	beq.n	8000c86 <_fwalk_reent+0x3a>
 8000c7e:	4629      	mov	r1, r5
 8000c80:	4630      	mov	r0, r6
 8000c82:	47c0      	blx	r8
 8000c84:	4307      	orrs	r7, r0
 8000c86:	3568      	adds	r5, #104	; 0x68
 8000c88:	e7e9      	b.n	8000c5e <_fwalk_reent+0x12>

08000c8a <__retarget_lock_init_recursive>:
 8000c8a:	4770      	bx	lr

08000c8c <__retarget_lock_acquire_recursive>:
 8000c8c:	4770      	bx	lr

08000c8e <__retarget_lock_release_recursive>:
 8000c8e:	4770      	bx	lr

08000c90 <__swhatbuf_r>:
 8000c90:	b570      	push	{r4, r5, r6, lr}
 8000c92:	460e      	mov	r6, r1
 8000c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	b096      	sub	sp, #88	; 0x58
 8000c9c:	4614      	mov	r4, r2
 8000c9e:	461d      	mov	r5, r3
 8000ca0:	da07      	bge.n	8000cb2 <__swhatbuf_r+0x22>
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	602b      	str	r3, [r5, #0]
 8000ca6:	89b3      	ldrh	r3, [r6, #12]
 8000ca8:	061a      	lsls	r2, r3, #24
 8000caa:	d410      	bmi.n	8000cce <__swhatbuf_r+0x3e>
 8000cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb0:	e00e      	b.n	8000cd0 <__swhatbuf_r+0x40>
 8000cb2:	466a      	mov	r2, sp
 8000cb4:	f000 f970 	bl	8000f98 <_fstat_r>
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	dbf2      	blt.n	8000ca2 <__swhatbuf_r+0x12>
 8000cbc:	9a01      	ldr	r2, [sp, #4]
 8000cbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000cc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000cc6:	425a      	negs	r2, r3
 8000cc8:	415a      	adcs	r2, r3
 8000cca:	602a      	str	r2, [r5, #0]
 8000ccc:	e7ee      	b.n	8000cac <__swhatbuf_r+0x1c>
 8000cce:	2340      	movs	r3, #64	; 0x40
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	6023      	str	r3, [r4, #0]
 8000cd4:	b016      	add	sp, #88	; 0x58
 8000cd6:	bd70      	pop	{r4, r5, r6, pc}

08000cd8 <__smakebuf_r>:
 8000cd8:	898b      	ldrh	r3, [r1, #12]
 8000cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000cdc:	079d      	lsls	r5, r3, #30
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460c      	mov	r4, r1
 8000ce2:	d507      	bpl.n	8000cf4 <__smakebuf_r+0x1c>
 8000ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000ce8:	6023      	str	r3, [r4, #0]
 8000cea:	6123      	str	r3, [r4, #16]
 8000cec:	2301      	movs	r3, #1
 8000cee:	6163      	str	r3, [r4, #20]
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd70      	pop	{r4, r5, r6, pc}
 8000cf4:	ab01      	add	r3, sp, #4
 8000cf6:	466a      	mov	r2, sp
 8000cf8:	f7ff ffca 	bl	8000c90 <__swhatbuf_r>
 8000cfc:	9900      	ldr	r1, [sp, #0]
 8000cfe:	4605      	mov	r5, r0
 8000d00:	4630      	mov	r0, r6
 8000d02:	f000 f879 	bl	8000df8 <_malloc_r>
 8000d06:	b948      	cbnz	r0, 8000d1c <__smakebuf_r+0x44>
 8000d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d0c:	059a      	lsls	r2, r3, #22
 8000d0e:	d4ef      	bmi.n	8000cf0 <__smakebuf_r+0x18>
 8000d10:	f023 0303 	bic.w	r3, r3, #3
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	81a3      	strh	r3, [r4, #12]
 8000d1a:	e7e3      	b.n	8000ce4 <__smakebuf_r+0xc>
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <__smakebuf_r+0x7c>)
 8000d1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d20:	89a3      	ldrh	r3, [r4, #12]
 8000d22:	6020      	str	r0, [r4, #0]
 8000d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d28:	81a3      	strh	r3, [r4, #12]
 8000d2a:	9b00      	ldr	r3, [sp, #0]
 8000d2c:	6163      	str	r3, [r4, #20]
 8000d2e:	9b01      	ldr	r3, [sp, #4]
 8000d30:	6120      	str	r0, [r4, #16]
 8000d32:	b15b      	cbz	r3, 8000d4c <__smakebuf_r+0x74>
 8000d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d38:	4630      	mov	r0, r6
 8000d3a:	f000 f93f 	bl	8000fbc <_isatty_r>
 8000d3e:	b128      	cbz	r0, 8000d4c <__smakebuf_r+0x74>
 8000d40:	89a3      	ldrh	r3, [r4, #12]
 8000d42:	f023 0303 	bic.w	r3, r3, #3
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	81a3      	strh	r3, [r4, #12]
 8000d4c:	89a0      	ldrh	r0, [r4, #12]
 8000d4e:	4305      	orrs	r5, r0
 8000d50:	81a5      	strh	r5, [r4, #12]
 8000d52:	e7cd      	b.n	8000cf0 <__smakebuf_r+0x18>
 8000d54:	08000ae9 	.word	0x08000ae9

08000d58 <_free_r>:
 8000d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d5a:	2900      	cmp	r1, #0
 8000d5c:	d048      	beq.n	8000df0 <_free_r+0x98>
 8000d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d62:	9001      	str	r0, [sp, #4]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f1a1 0404 	sub.w	r4, r1, #4
 8000d6a:	bfb8      	it	lt
 8000d6c:	18e4      	addlt	r4, r4, r3
 8000d6e:	f000 f947 	bl	8001000 <__malloc_lock>
 8000d72:	4a20      	ldr	r2, [pc, #128]	; (8000df4 <_free_r+0x9c>)
 8000d74:	9801      	ldr	r0, [sp, #4]
 8000d76:	6813      	ldr	r3, [r2, #0]
 8000d78:	4615      	mov	r5, r2
 8000d7a:	b933      	cbnz	r3, 8000d8a <_free_r+0x32>
 8000d7c:	6063      	str	r3, [r4, #4]
 8000d7e:	6014      	str	r4, [r2, #0]
 8000d80:	b003      	add	sp, #12
 8000d82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d86:	f000 b941 	b.w	800100c <__malloc_unlock>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d90b      	bls.n	8000da6 <_free_r+0x4e>
 8000d8e:	6821      	ldr	r1, [r4, #0]
 8000d90:	1862      	adds	r2, r4, r1
 8000d92:	4293      	cmp	r3, r2
 8000d94:	bf04      	itt	eq
 8000d96:	681a      	ldreq	r2, [r3, #0]
 8000d98:	685b      	ldreq	r3, [r3, #4]
 8000d9a:	6063      	str	r3, [r4, #4]
 8000d9c:	bf04      	itt	eq
 8000d9e:	1852      	addeq	r2, r2, r1
 8000da0:	6022      	streq	r2, [r4, #0]
 8000da2:	602c      	str	r4, [r5, #0]
 8000da4:	e7ec      	b.n	8000d80 <_free_r+0x28>
 8000da6:	461a      	mov	r2, r3
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	b10b      	cbz	r3, 8000db0 <_free_r+0x58>
 8000dac:	42a3      	cmp	r3, r4
 8000dae:	d9fa      	bls.n	8000da6 <_free_r+0x4e>
 8000db0:	6811      	ldr	r1, [r2, #0]
 8000db2:	1855      	adds	r5, r2, r1
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	d10b      	bne.n	8000dd0 <_free_r+0x78>
 8000db8:	6824      	ldr	r4, [r4, #0]
 8000dba:	4421      	add	r1, r4
 8000dbc:	1854      	adds	r4, r2, r1
 8000dbe:	42a3      	cmp	r3, r4
 8000dc0:	6011      	str	r1, [r2, #0]
 8000dc2:	d1dd      	bne.n	8000d80 <_free_r+0x28>
 8000dc4:	681c      	ldr	r4, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	6053      	str	r3, [r2, #4]
 8000dca:	4421      	add	r1, r4
 8000dcc:	6011      	str	r1, [r2, #0]
 8000dce:	e7d7      	b.n	8000d80 <_free_r+0x28>
 8000dd0:	d902      	bls.n	8000dd8 <_free_r+0x80>
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	6003      	str	r3, [r0, #0]
 8000dd6:	e7d3      	b.n	8000d80 <_free_r+0x28>
 8000dd8:	6825      	ldr	r5, [r4, #0]
 8000dda:	1961      	adds	r1, r4, r5
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	bf04      	itt	eq
 8000de0:	6819      	ldreq	r1, [r3, #0]
 8000de2:	685b      	ldreq	r3, [r3, #4]
 8000de4:	6063      	str	r3, [r4, #4]
 8000de6:	bf04      	itt	eq
 8000de8:	1949      	addeq	r1, r1, r5
 8000dea:	6021      	streq	r1, [r4, #0]
 8000dec:	6054      	str	r4, [r2, #4]
 8000dee:	e7c7      	b.n	8000d80 <_free_r+0x28>
 8000df0:	b003      	add	sp, #12
 8000df2:	bd30      	pop	{r4, r5, pc}
 8000df4:	20000098 	.word	0x20000098

08000df8 <_malloc_r>:
 8000df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dfa:	1ccd      	adds	r5, r1, #3
 8000dfc:	f025 0503 	bic.w	r5, r5, #3
 8000e00:	3508      	adds	r5, #8
 8000e02:	2d0c      	cmp	r5, #12
 8000e04:	bf38      	it	cc
 8000e06:	250c      	movcc	r5, #12
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	4606      	mov	r6, r0
 8000e0c:	db01      	blt.n	8000e12 <_malloc_r+0x1a>
 8000e0e:	42a9      	cmp	r1, r5
 8000e10:	d903      	bls.n	8000e1a <_malloc_r+0x22>
 8000e12:	230c      	movs	r3, #12
 8000e14:	6033      	str	r3, [r6, #0]
 8000e16:	2000      	movs	r0, #0
 8000e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e1a:	f000 f8f1 	bl	8001000 <__malloc_lock>
 8000e1e:	4921      	ldr	r1, [pc, #132]	; (8000ea4 <_malloc_r+0xac>)
 8000e20:	680a      	ldr	r2, [r1, #0]
 8000e22:	4614      	mov	r4, r2
 8000e24:	b99c      	cbnz	r4, 8000e4e <_malloc_r+0x56>
 8000e26:	4f20      	ldr	r7, [pc, #128]	; (8000ea8 <_malloc_r+0xb0>)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b923      	cbnz	r3, 8000e36 <_malloc_r+0x3e>
 8000e2c:	4621      	mov	r1, r4
 8000e2e:	4630      	mov	r0, r6
 8000e30:	f000 f83c 	bl	8000eac <_sbrk_r>
 8000e34:	6038      	str	r0, [r7, #0]
 8000e36:	4629      	mov	r1, r5
 8000e38:	4630      	mov	r0, r6
 8000e3a:	f000 f837 	bl	8000eac <_sbrk_r>
 8000e3e:	1c43      	adds	r3, r0, #1
 8000e40:	d123      	bne.n	8000e8a <_malloc_r+0x92>
 8000e42:	230c      	movs	r3, #12
 8000e44:	6033      	str	r3, [r6, #0]
 8000e46:	4630      	mov	r0, r6
 8000e48:	f000 f8e0 	bl	800100c <__malloc_unlock>
 8000e4c:	e7e3      	b.n	8000e16 <_malloc_r+0x1e>
 8000e4e:	6823      	ldr	r3, [r4, #0]
 8000e50:	1b5b      	subs	r3, r3, r5
 8000e52:	d417      	bmi.n	8000e84 <_malloc_r+0x8c>
 8000e54:	2b0b      	cmp	r3, #11
 8000e56:	d903      	bls.n	8000e60 <_malloc_r+0x68>
 8000e58:	6023      	str	r3, [r4, #0]
 8000e5a:	441c      	add	r4, r3
 8000e5c:	6025      	str	r5, [r4, #0]
 8000e5e:	e004      	b.n	8000e6a <_malloc_r+0x72>
 8000e60:	6863      	ldr	r3, [r4, #4]
 8000e62:	42a2      	cmp	r2, r4
 8000e64:	bf0c      	ite	eq
 8000e66:	600b      	streq	r3, [r1, #0]
 8000e68:	6053      	strne	r3, [r2, #4]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	f000 f8ce 	bl	800100c <__malloc_unlock>
 8000e70:	f104 000b 	add.w	r0, r4, #11
 8000e74:	1d23      	adds	r3, r4, #4
 8000e76:	f020 0007 	bic.w	r0, r0, #7
 8000e7a:	1ac2      	subs	r2, r0, r3
 8000e7c:	d0cc      	beq.n	8000e18 <_malloc_r+0x20>
 8000e7e:	1a1b      	subs	r3, r3, r0
 8000e80:	50a3      	str	r3, [r4, r2]
 8000e82:	e7c9      	b.n	8000e18 <_malloc_r+0x20>
 8000e84:	4622      	mov	r2, r4
 8000e86:	6864      	ldr	r4, [r4, #4]
 8000e88:	e7cc      	b.n	8000e24 <_malloc_r+0x2c>
 8000e8a:	1cc4      	adds	r4, r0, #3
 8000e8c:	f024 0403 	bic.w	r4, r4, #3
 8000e90:	42a0      	cmp	r0, r4
 8000e92:	d0e3      	beq.n	8000e5c <_malloc_r+0x64>
 8000e94:	1a21      	subs	r1, r4, r0
 8000e96:	4630      	mov	r0, r6
 8000e98:	f000 f808 	bl	8000eac <_sbrk_r>
 8000e9c:	3001      	adds	r0, #1
 8000e9e:	d1dd      	bne.n	8000e5c <_malloc_r+0x64>
 8000ea0:	e7cf      	b.n	8000e42 <_malloc_r+0x4a>
 8000ea2:	bf00      	nop
 8000ea4:	20000098 	.word	0x20000098
 8000ea8:	2000009c 	.word	0x2000009c

08000eac <_sbrk_r>:
 8000eac:	b538      	push	{r3, r4, r5, lr}
 8000eae:	4d06      	ldr	r5, [pc, #24]	; (8000ec8 <_sbrk_r+0x1c>)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	602b      	str	r3, [r5, #0]
 8000eb8:	f7ff fb68 	bl	800058c <_sbrk>
 8000ebc:	1c43      	adds	r3, r0, #1
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk_r+0x1a>
 8000ec0:	682b      	ldr	r3, [r5, #0]
 8000ec2:	b103      	cbz	r3, 8000ec6 <_sbrk_r+0x1a>
 8000ec4:	6023      	str	r3, [r4, #0]
 8000ec6:	bd38      	pop	{r3, r4, r5, pc}
 8000ec8:	200000bc 	.word	0x200000bc

08000ecc <__sread>:
 8000ecc:	b510      	push	{r4, lr}
 8000ece:	460c      	mov	r4, r1
 8000ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ed4:	f000 f8a0 	bl	8001018 <_read_r>
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	bfab      	itete	ge
 8000edc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000ede:	89a3      	ldrhlt	r3, [r4, #12]
 8000ee0:	181b      	addge	r3, r3, r0
 8000ee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000ee6:	bfac      	ite	ge
 8000ee8:	6563      	strge	r3, [r4, #84]	; 0x54
 8000eea:	81a3      	strhlt	r3, [r4, #12]
 8000eec:	bd10      	pop	{r4, pc}

08000eee <__swrite>:
 8000eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ef2:	461f      	mov	r7, r3
 8000ef4:	898b      	ldrh	r3, [r1, #12]
 8000ef6:	05db      	lsls	r3, r3, #23
 8000ef8:	4605      	mov	r5, r0
 8000efa:	460c      	mov	r4, r1
 8000efc:	4616      	mov	r6, r2
 8000efe:	d505      	bpl.n	8000f0c <__swrite+0x1e>
 8000f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f04:	2302      	movs	r3, #2
 8000f06:	2200      	movs	r2, #0
 8000f08:	f000 f868 	bl	8000fdc <_lseek_r>
 8000f0c:	89a3      	ldrh	r3, [r4, #12]
 8000f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f16:	81a3      	strh	r3, [r4, #12]
 8000f18:	4632      	mov	r2, r6
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f22:	f000 b817 	b.w	8000f54 <_write_r>

08000f26 <__sseek>:
 8000f26:	b510      	push	{r4, lr}
 8000f28:	460c      	mov	r4, r1
 8000f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f2e:	f000 f855 	bl	8000fdc <_lseek_r>
 8000f32:	1c43      	adds	r3, r0, #1
 8000f34:	89a3      	ldrh	r3, [r4, #12]
 8000f36:	bf15      	itete	ne
 8000f38:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f42:	81a3      	strheq	r3, [r4, #12]
 8000f44:	bf18      	it	ne
 8000f46:	81a3      	strhne	r3, [r4, #12]
 8000f48:	bd10      	pop	{r4, pc}

08000f4a <__sclose>:
 8000f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f4e:	f000 b813 	b.w	8000f78 <_close_r>
	...

08000f54 <_write_r>:
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4d07      	ldr	r5, [pc, #28]	; (8000f74 <_write_r+0x20>)
 8000f58:	4604      	mov	r4, r0
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	2200      	movs	r2, #0
 8000f60:	602a      	str	r2, [r5, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	f7ff fac1 	bl	80004ea <_write>
 8000f68:	1c43      	adds	r3, r0, #1
 8000f6a:	d102      	bne.n	8000f72 <_write_r+0x1e>
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	b103      	cbz	r3, 8000f72 <_write_r+0x1e>
 8000f70:	6023      	str	r3, [r4, #0]
 8000f72:	bd38      	pop	{r3, r4, r5, pc}
 8000f74:	200000bc 	.word	0x200000bc

08000f78 <_close_r>:
 8000f78:	b538      	push	{r3, r4, r5, lr}
 8000f7a:	4d06      	ldr	r5, [pc, #24]	; (8000f94 <_close_r+0x1c>)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	4604      	mov	r4, r0
 8000f80:	4608      	mov	r0, r1
 8000f82:	602b      	str	r3, [r5, #0]
 8000f84:	f7ff facd 	bl	8000522 <_close>
 8000f88:	1c43      	adds	r3, r0, #1
 8000f8a:	d102      	bne.n	8000f92 <_close_r+0x1a>
 8000f8c:	682b      	ldr	r3, [r5, #0]
 8000f8e:	b103      	cbz	r3, 8000f92 <_close_r+0x1a>
 8000f90:	6023      	str	r3, [r4, #0]
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
 8000f94:	200000bc 	.word	0x200000bc

08000f98 <_fstat_r>:
 8000f98:	b538      	push	{r3, r4, r5, lr}
 8000f9a:	4d07      	ldr	r5, [pc, #28]	; (8000fb8 <_fstat_r+0x20>)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	602b      	str	r3, [r5, #0]
 8000fa6:	f7ff fac8 	bl	800053a <_fstat>
 8000faa:	1c43      	adds	r3, r0, #1
 8000fac:	d102      	bne.n	8000fb4 <_fstat_r+0x1c>
 8000fae:	682b      	ldr	r3, [r5, #0]
 8000fb0:	b103      	cbz	r3, 8000fb4 <_fstat_r+0x1c>
 8000fb2:	6023      	str	r3, [r4, #0]
 8000fb4:	bd38      	pop	{r3, r4, r5, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200000bc 	.word	0x200000bc

08000fbc <_isatty_r>:
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	4d06      	ldr	r5, [pc, #24]	; (8000fd8 <_isatty_r+0x1c>)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	602b      	str	r3, [r5, #0]
 8000fc8:	f7ff fac7 	bl	800055a <_isatty>
 8000fcc:	1c43      	adds	r3, r0, #1
 8000fce:	d102      	bne.n	8000fd6 <_isatty_r+0x1a>
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	b103      	cbz	r3, 8000fd6 <_isatty_r+0x1a>
 8000fd4:	6023      	str	r3, [r4, #0]
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
 8000fd8:	200000bc 	.word	0x200000bc

08000fdc <_lseek_r>:
 8000fdc:	b538      	push	{r3, r4, r5, lr}
 8000fde:	4d07      	ldr	r5, [pc, #28]	; (8000ffc <_lseek_r+0x20>)
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	602a      	str	r2, [r5, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	f7ff fac0 	bl	8000570 <_lseek>
 8000ff0:	1c43      	adds	r3, r0, #1
 8000ff2:	d102      	bne.n	8000ffa <_lseek_r+0x1e>
 8000ff4:	682b      	ldr	r3, [r5, #0]
 8000ff6:	b103      	cbz	r3, 8000ffa <_lseek_r+0x1e>
 8000ff8:	6023      	str	r3, [r4, #0]
 8000ffa:	bd38      	pop	{r3, r4, r5, pc}
 8000ffc:	200000bc 	.word	0x200000bc

08001000 <__malloc_lock>:
 8001000:	4801      	ldr	r0, [pc, #4]	; (8001008 <__malloc_lock+0x8>)
 8001002:	f7ff be43 	b.w	8000c8c <__retarget_lock_acquire_recursive>
 8001006:	bf00      	nop
 8001008:	200000b4 	.word	0x200000b4

0800100c <__malloc_unlock>:
 800100c:	4801      	ldr	r0, [pc, #4]	; (8001014 <__malloc_unlock+0x8>)
 800100e:	f7ff be3e 	b.w	8000c8e <__retarget_lock_release_recursive>
 8001012:	bf00      	nop
 8001014:	200000b4 	.word	0x200000b4

08001018 <_read_r>:
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	4d07      	ldr	r5, [pc, #28]	; (8001038 <_read_r+0x20>)
 800101c:	4604      	mov	r4, r0
 800101e:	4608      	mov	r0, r1
 8001020:	4611      	mov	r1, r2
 8001022:	2200      	movs	r2, #0
 8001024:	602a      	str	r2, [r5, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	f7ff fa42 	bl	80004b0 <_read>
 800102c:	1c43      	adds	r3, r0, #1
 800102e:	d102      	bne.n	8001036 <_read_r+0x1e>
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	b103      	cbz	r3, 8001036 <_read_r+0x1e>
 8001034:	6023      	str	r3, [r4, #0]
 8001036:	bd38      	pop	{r3, r4, r5, pc}
 8001038:	200000bc 	.word	0x200000bc

0800103c <_init>:
 800103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800103e:	bf00      	nop
 8001040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001042:	bc08      	pop	{r3}
 8001044:	469e      	mov	lr, r3
 8001046:	4770      	bx	lr

08001048 <_fini>:
 8001048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104a:	bf00      	nop
 800104c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800104e:	bc08      	pop	{r3}
 8001050:	469e      	mov	lr, r3
 8001052:	4770      	bx	lr
